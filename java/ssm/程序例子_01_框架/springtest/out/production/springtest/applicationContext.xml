<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	   xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	   xmlns:util="http://www.springframework.org/schema/util" xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
	   http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"
	   default-lazy-init="true" default-init-method="init" default-destroy-method="destroy">

	<bean id="login" class="org.service.Login">
		<property name="userDao" ref="userdao">
		</property>
	</bean>
	<bean id="userdao" class="org.dao.UserDao"></bean>
	<context:component-scan base-package="org.ditest" />

	<!--===================================================================================================-->
	<!-- 静态工厂方法实例化 -->
	<bean id="jdbcEmpDao2" class="org.ditest1.dao.StaticDaoFactory" factory-method="getEmpDAO">
	</bean>
	<!-- 动态工厂方法实例化-->
	<bean id="objectDaoFactory" class="org.ditest1.dao.ObjectDaoFactory">
	</bean>
	<bean id="jdbcEmpDao3" factory-bean="objectDaoFactory" factory-method="getEmpDAO">
	</bean>
	<!-- 定义别名 -->
	<alias name="jdbcEmpDao3" alias="jdbcEmpDao4"/>
	<!-- 控制Bean对象创建 -->
	<bean id="exampleBean" class="org.ditest1.dao.ExampleBean" lazy-init="true"
		  scope="singleton" init-method="init" destroy-method="destroy" depends-on="bean1">
	</bean>
	<bean id="bean1" class="org.ditest1.dao.ExampleBean1" lazy-init="true">
	</bean>

	<!--===================================================================================================-->


	<bean id="empdao" class="org.ditest1.dao.JdbcEmpDAO1"></bean>
	<!-- 构造参数注入 -->
	<bean id="deleteEmpService" class="org.ditest2.service.DeleteEmpService">
		<constructor-arg index="0" ref="jdbcEmpDao2">
		</constructor-arg>
	</bean>
	<bean id="deleteEmpService1" class="org.ditest2.service.DeleteEmpService">
		<constructor-arg>
			<bean class="org.ditest1.dao.JdbcEmpDAO"></bean>
		</constructor-arg>
	</bean>
	<!-- 自动装配 -->
	<bean id="updateEmpService" class="org.ditest2.service.UpdateEmpService" autowire="byType">
	</bean>

	<!--====================================================================================================-->

	<util:properties id="jdbcProperties"
					 location="classpath:db.properties"/>

	<bean id="messagebean"
		  class="org.beanditest.bean.MessageBean">
		<property name="moduleName" value="资费管理"></property>
		<property name="pageSize" value="5"></property>
		<property name="username" value="#{jdbcProperties.user}"></property>
		<property name="password"><null/></property>
		<property name="someList">
			<list>
				<value>北京</value>
				<value>上海</value>
				<value>广州</value>
			</list>
		</property>
		<property name="someSet">
			<set>
				<value>James Gosling</value>
				<value>Martin fowler</value>
				<value>Larry Ellision</value>
			</set>
		</property>
		<property name="someMap">
			<map>
				<entry key="1001" value="Java语言基础"></entry>
				<entry key="1002" value="Java Web基础"></entry>
				<entry key="1003" value="Spring使用基础"></entry>
			</map>
		</property>
		<property name="someProps">
			<props>
				<prop key="username">root</prop>
				<prop key="password">1234</prop>
			</props>
		</property>
	</bean>


	<!-- 组件扫描 -->
	<context:component-scan base-package="org.beanditest"/>

	<!--====================================================================================================-->

	<context:component-scan base-package="org.beanditest1"/>
	<util:properties id="jdbcProperties1" location="classpath:org/beanditest1/util/db.properties"/>

	<!--====================================================================================================-->

	<bean id="userserivce" class="org.aop.service.UserServiceImpl">
	</bean>
	<bean id="optlogger" class="org.aop.aop.OptLogger"></bean>
	<aop:config>
		<aop:pointcut id="servicepointcut"
					  expression="execution(* org.aop.service.*.*(..))" />
		<aop:aspect id="loggeraspect" ref="optlogger">
			<aop:before method="logger" pointcut-ref="servicepointcut"/>  <!--aop:before-->
		</aop:aspect>
	</aop:config>

	<bean id="optlogger1" class="org.aop.aop.OptLogger1"></bean>
	<aop:config>
		<aop:pointcut id="servicepointcut1"
					  expression="execution(* org.aop.service.*.*(..))" />
		<aop:aspect id="loggeraspect1" ref="optlogger1">
			<aop:around method="logger" pointcut-ref="servicepointcut1"/>  <!--aop:before-->
		</aop:aspect>
	</aop:config>

	<!--====================================================================================================-->

	<bean id="userservice1"
		  class="org.aop.service.UserServiceImpl"></bean>
	<bean id="aopbean" class="org.aop.aop.AopBean"></bean>
	<aop:config>
		<aop:pointcut id="servicepointcut2"
					  expression="within (org.aop.service.*)" />
		<aop:aspect id="aspectbean" ref="aopbean">
			<aop:before method="mybefore"
						pointcut-ref="servicepointcut2"/>
			<aop:after-returning method="myafterReturning"
								 returning="retVal"
								 pointcut-ref="servicepointcut2"/>
			<aop:after-throwing method="myafterException"
								throwing="ex"
								pointcut-ref="servicepointcut2"/>
			<aop:after method="myafter"
					   pointcut-ref="servicepointcut2"/>
		</aop:aspect>

	</aop:config>

	<!--====================================================================================================-->
	<context:component-scan base-package="org.aop">
	</context:component-scan>
	<aop:aspectj-autoproxy/>


</beans>